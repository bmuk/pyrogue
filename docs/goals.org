This document exists to define the goals of our project, the scope, how we will measure success, and how we will measure failure

* Goals
To make a cross platform, text based game with a cyberpunk setting. Game play should be thoughtful and strategic and yet have elements of survival horror games as well. The pace should be slow enough that the player has time to think about his actions, but not so slow as to remove the element of fear. The game should be simple to understand, yet challenging to complete, and offer strong replay-ability through randomization. The game must be cross platform, portable, and self-contained. It must run on low-end hardware. The game should also be modifiable through configuration files.
** Hard Requirements
ASCII Text only (for now)
Support saving and loading games
Support recording and playback of games and partial games
Cross Platform
Playable on low-end hardware (my laptop; I also have a PowerPC Mac from early 2000s to test on)

* Scope
The scope of this project will be to create the game and its configuration/extension capabilities and all hard requirements. Scope may be extended to include optional requirements and stretch goals as well.

* Measure of Success
To be considered a success the game must adhere to all hard requirements and fulfill all goals outlined here. The measure of success will be based on how much our group enjoys playing the game.

* Measure of Failure
The project will be considered a failure if it does not meet the hard requirements or if it is not enjoyable for our team to play.

* Tech goals
** Define Technology Needs
Implementation language and development environment must be cross platform
Unit testing to ensure correctness
Flexible and high level console input and output
Cross platform and human writable/readable file format
Game Engine
** Build v Acquire
Implementing a programming language or development environment are obviously outside of the scope of this project, so we will acquire them.
Unit testing could go either way, but I would prefer to acquire this so we can focus on the development of the game itself.
Console input and output is again outside our scope and a large undertaking - acquire.
The file format is tricky - there are many to choose from, but I think designing one will also be outside of our scope and discourage input from modders (they will not want to learn a new format just for our game), so I'm leaning on acquire for this as well.
Implementing the game engine is arguably the purpose of this project so we will be building this ourselves.
** Select Acquisitions
Implementation Language - Python, not only because it fulfills all of our requirements, but because it is the only language we are allowed to use :p
Development Environment - This is kind of a personal choice, really. I am using emacs, which fulfills all of the requirements, but has a rather high learning curve. I have suggested either Sublime Text or Notepad++ because they are simpler and also fulfill the requirements (though I don't think Notepad++ is cross platform, not that that really matters since most of you only use windows throughout the day, and don't need to write on a mac very often or anything. If you need help in this area ask me).
Unit testing - with python we have unittest and nose. They are really the same thing, but I would like to use nose as it makes it easier to write unit tests and integrates well with travisci.
Console input and output - for this we will be using libtcod, also called the droyen library, simply because it fulfills all of our requirements, has bindings for python, and is really easy to use.
File format - I think JSON is a good fit for this because it is ubiquitous and easy to understand. If need be, we can switch this out later.
Game engine - obviously this is what we will be building and we will ensure that it meets our requirements.
