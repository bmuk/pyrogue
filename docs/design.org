This document outlines the overall design of our project, how we will implement it, and how we will test it

* Mile high view
Since our project is a game which has interaction from the player, the main function our game will call must loop indefinitely until the player decides to quit. We will call this our game loop. Note that the loop doesn't have to explicitly exist in main.py, but it must be called and we must know its general design before we do anything else.
** Game Loop
This loop is, all in all, pretty simple. We need to get input from the player, act on that input, update all the game entities, and then draw the changed world to the screen. It will probably end up looking like this:

#+begin_src python
while game_is_not_closed:
    player.update()
    world.update()
    painter.paint(world)
#+end_src

This is pretty simple, but it contrasts with what we have now in that we are not explicitly calling an input function. I have decided it would be better if we used an Entity Component system, since the class hierarchy is getting a little unwieldy. This essentially means that our game objects will be bags for components, which will have the real functionality (i.e. the player is a game object with an input component, a health component, etc.), and the update function will simply call the update function on all of the entity's components. I'll get into this more later.
It stands to reason that world.update() updates all the entities in the world (or at least on the current level), and that the call to painter.paint iterates through all of the tiles in the player's FOV and that he has already explored and draws them to the screen.

* Entity Component System
This model of design contrasts with traditional object oriented design (large class hierarchies) in that game objects are simply a collection of components, which in turn have functionality, instead of the entities themselves having functionality. For instance, the player object doesn't handle input itself - it owns an input component which handles input. This allows us to decouple functionality from the objects that need it - we can then test this functionality or add new functionality fairly easily. This also makes our game objects really simple, they would probably be something like this:

#+begin_src python
class Entity(object):
    """The base game object."""
    def __init__(self):
        # initialize components/controllers here
    def update(self):
        for component in self.components:
            component.update()
#+end_src

Our entities are really simple, and that's how it should be. All of the actual logic (even setting up fields) should go in the components. This allows us to reuse the common code and test components independently of the entities they are attached to.

* Parts of our system
So our game definitely has a few distinct parts. There are Entities, which are really just containers of Components. Then there is the game's World itself, which contains all of our Entities, as well as the Map which is a list of Levels, which is a two-dimensional matrix of Tiles. Finally, we have a Painter, which takes our World and paints the important parts to the screen.

** World
This should set everything up, including the player, when it is initialized. It can optionally take a saved game state, from which it will rebuild the saved world. Initialization (without previous state) includes generating the Map, the player, and the monsters on the current level.

*** Map
This lazily generates levels, which represent the dungeon itself (i.e. just the rock, no items or monsters).

**** Level
This strictly generates a two-dimensional matrix which fills the screen (leaving room for text and stats at the bottom, look in constants.py for specific size). This should include rooms of various sizes and paths in-between the rooms, as well as stairs into the next level (the stairs up will have been generated by the previous level; the only time this is not true is the first level we ever generate, in which case we should randomly generate those too). We should ensure that there is always at least one path from every room to another, that way there are no dead spots in our dungeon (i.e. the player cannot get there).

** Painter
This will take the world, and isolate only those tiles such that they are in the player's FOV, or the player has memory of them (they have been in the player's FOV before). The painter differentiates between these types of tiles because those that are not now in the FOV, but have once been, are obscured by the fog-of-war, that is, we will draw them in a different color than normal, and we will only draw their terrain, not what entities are currently inhabiting them. This adds to the realism of the game and also to the difficulty (if we can see monsters before we happen upon them, we can simply avoid them until we are ready).
* Testing
I would like to adhere to test driven development as much as possible, where we write tests first, run them to see them fail, and only then write as little code as possible to make them pass. I know this isn't feasible for everything in the project, because some of it relies on user input or drawing to the screen, but it would definitely benefit us to ensure most of our code is tested. As we find bugs, we should write tests for them so that we know no new changes will reintroduce that bug.
